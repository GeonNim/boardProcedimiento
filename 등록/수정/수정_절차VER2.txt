-1. board의 board_id를 참조키로 가지며 board의 값들을 가지고 board_history_id를 추가적으로 가지는 board_history란 테이블을 생성
(CREATE board_history)

0. 게시글 작성자가 자신의 게시물을 수정 하고자 한다. (추가적으로 히스토리를 남긴다.)

1.프론트에서 백으로 post 요청을 하며 게시글 id 값과 게시글 비밀번호 및 수정 할 내용인 제목과 내용 값을 전달한다.

2. router에서 지정한 엔드포인트로 요청 및 값 수신하고 controller로 전달한다.

3. controller에서 요청 내용에 맞게 값을 찾아 전달한다.

3.0 board_id를 이용 db에 존재하는지 조회

3.0.1. 없다면 에러 값을 반환한다. 있다면 3.1로

3.0.2. db전달 0을 전달 받으면 백에서 프론트로 에러를 응답해준다. ex) 해당 게시글이 존재하지 않습니다.

3.1. board_id값으로 게시글 비밀번호를 (db에서 조회  ? 3.4의 순서로   :  3.2의 순서로)

3.2. 게시글 비밀번호가 불일치 했을경우 에러 값(0)을 반환한다.

3.3. db에서 에러 값을  백으로 에러를 전달 받으면 프론트로 에러를 응답해준다. ex) 비밀번호가 틀렸습니다.

3.4  board_id를 참조해서 제목과 내용의 값을 board_history에 입력한다.
(INSERT board_history)

3.5 INSERT 실패시 에러(0)을 반환한다. 성공시 3.6으로

3.5.1 db에서 0을 전달 받았다면  백에서 프론트로 에러를 응답해준다. ex) 오류 재시도 부탁 드리겠습니다.

3.6 전달 받은 변경 값을 해당 board_id에 맞는 board의 값을 수정한다.
(UPDATE board)

4. 요청에 따른 결과 값을 프론트로 반환한다. (응답 : 성공 or 에러)

5. 백에서 전달 받은 응답을 바탕으로 프론트에서 피드백을 유저한테 제공한다. ex) 게시글 수정이 완료 되었습니다. or 게시글 수정에 실패했습니다.
